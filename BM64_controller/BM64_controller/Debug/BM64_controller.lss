
BM64_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  000008b4  00000928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a00  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea9  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0d  00000000  00000000  00001995  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000687  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d9  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000362  00000000  00000000  00003271  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000035d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	2f c0       	rjmp	.+94     	; 0x62 <__bad_interrupt>
   4:	2e c0       	rjmp	.+92     	; 0x62 <__bad_interrupt>
   6:	2d c0       	rjmp	.+90     	; 0x62 <__bad_interrupt>
   8:	2c c0       	rjmp	.+88     	; 0x62 <__bad_interrupt>
   a:	2b c0       	rjmp	.+86     	; 0x62 <__bad_interrupt>
   c:	2a c0       	rjmp	.+84     	; 0x62 <__bad_interrupt>
   e:	29 c0       	rjmp	.+82     	; 0x62 <__bad_interrupt>
  10:	28 c0       	rjmp	.+80     	; 0x62 <__bad_interrupt>
  12:	27 c0       	rjmp	.+78     	; 0x62 <__bad_interrupt>
  14:	26 c0       	rjmp	.+76     	; 0x62 <__bad_interrupt>
  16:	25 c0       	rjmp	.+74     	; 0x62 <__bad_interrupt>
  18:	24 c0       	rjmp	.+72     	; 0x62 <__bad_interrupt>
  1a:	23 c0       	rjmp	.+70     	; 0x62 <__bad_interrupt>
  1c:	22 c0       	rjmp	.+68     	; 0x62 <__bad_interrupt>
  1e:	21 c0       	rjmp	.+66     	; 0x62 <__bad_interrupt>
  20:	20 c0       	rjmp	.+64     	; 0x62 <__bad_interrupt>
  22:	1f c0       	rjmp	.+62     	; 0x62 <__bad_interrupt>
  24:	1e c0       	rjmp	.+60     	; 0x62 <__bad_interrupt>
  26:	1d c0       	rjmp	.+58     	; 0x62 <__bad_interrupt>
  28:	1c c0       	rjmp	.+56     	; 0x62 <__bad_interrupt>
  2a:	1b c0       	rjmp	.+54     	; 0x62 <__bad_interrupt>
  2c:	1a c0       	rjmp	.+52     	; 0x62 <__bad_interrupt>
  2e:	19 c0       	rjmp	.+50     	; 0x62 <__bad_interrupt>
  30:	18 c0       	rjmp	.+48     	; 0x62 <__bad_interrupt>
  32:	17 c0       	rjmp	.+46     	; 0x62 <__bad_interrupt>
  34:	16 c0       	rjmp	.+44     	; 0x62 <__bad_interrupt>
  36:	15 c0       	rjmp	.+42     	; 0x62 <__bad_interrupt>
  38:	14 c0       	rjmp	.+40     	; 0x62 <__bad_interrupt>
  3a:	13 c0       	rjmp	.+38     	; 0x62 <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	e4 eb       	ldi	r30, 0xB4	; 180
  50:	f8 e0       	ldi	r31, 0x08	; 8
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	ac 37       	cpi	r26, 0x7C	; 124
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>
  5e:	02 d0       	rcall	.+4      	; 0x64 <main>
  60:	27 c4       	rjmp	.+2126   	; 0x8b0 <_exit>

00000062 <__bad_interrupt>:
  62:	ce cf       	rjmp	.-100    	; 0x0 <__vectors>

00000064 <main>:
#endif



int main(void)
{
  64:	cf 93       	push	r28
  66:	df 93       	push	r29
  68:	cd b7       	in	r28, 0x3d	; 61
  6a:	de b7       	in	r29, 0x3e	; 62
  6c:	c6 54       	subi	r28, 0x46	; 70
  6e:	d1 09       	sbc	r29, r1
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	f8 94       	cli
  74:	de bf       	out	0x3e, r29	; 62
  76:	0f be       	out	0x3f, r0	; 63
  78:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t ADC_BUFFER[DAMPER_BUFFER];
	uint16_t averageValue;
	uint8_t j;
	
	Enable_WatchDog(SET_128K_CYCLES);
  7a:	80 e2       	ldi	r24, 0x20	; 32
  7c:	96 d0       	rcall	.+300    	; 0x1aa <_Z15Enable_WatchDogh>
	Reset_WDT();
  7e:	a8 95       	wdr
	
	
	USART_Init_0(BAUDRATE_VALUE); //Godlike tool is now ready (Well I hope...)
  80:	83 e3       	ldi	r24, 0x33	; 51
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	60 d0       	rcall	.+192    	; 0x146 <_Z12USART_Init_0j>
	//USART_Init_1(BAUDRATE_VALUE); //Godlike tool is now ready (Well I hope...)
	
	showResetCause(); //Read what cause a reset on system ?
  86:	95 d0       	rcall	.+298    	; 0x1b2 <_Z14showResetCausev>
	
	
	
	
	if(!checkEEPROM()) //check if our value respect the normalized values
  88:	e0 d0       	rcall	.+448    	; 0x24a <_Z11checkEEPROMv>
  8a:	81 11       	cpse	r24, r1
  8c:	07 c0       	rjmp	.+14     	; 0x9c <main+0x38>
	{
		//try to put warning sequence here !
		USART_Init_1(H9600_PRESET); //set default preset
  8e:	83 e3       	ldi	r24, 0x33	; 51
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	64 d0       	rcall	.+200    	; 0x15c <_Z12USART_Init_1j>
		writeEEPROM(SERIAL_PORT_PRESET, H9600_PRESET); //write to avoid this issue (maybe remove this instruction)
  94:	63 e3       	ldi	r22, 0x33	; 51
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	ca d0       	rcall	.+404    	; 0x22e <_Z11writeEEPROMhh>
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <main+0x40>
	}
	else
	{
		USART_Init_1(readEEPROM(SERIAL_PORT_PRESET)); 
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	bd d0       	rcall	.+378    	; 0x21a <_Z10readEEPROMh>
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	5c d0       	rcall	.+184    	; 0x15c <_Z12USART_Init_1j>
	}
	
	SELECT_ADC(ADC11_PIN);
  a4:	8b e0       	ldi	r24, 0x0B	; 11
  a6:	89 b9       	out	0x09, r24	; 9
	SELECT_REFERENCE_VOLTAGE(SET_VCC_REFERENCE);
  a8:	18 b8       	out	0x08, r1	; 8
	adc_init(ADC_CK_DIV128);
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	fd d0       	rcall	.+506    	; 0x2a8 <_Z8adc_inith>
	
	
	
	
	for(j = 0; j < DAMPER_BUFFER; j++)
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	84 31       	cpi	r24, 0x14	; 20
  b2:	48 f4       	brcc	.+18     	; 0xc6 <main+0x62>
		ADC_BUFFER[j] = 0; //clear buffer first
  b4:	e3 e3       	ldi	r30, 0x33	; 51
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	ec 0f       	add	r30, r28
  ba:	fd 1f       	adc	r31, r29
  bc:	e8 0f       	add	r30, r24
  be:	f1 1d       	adc	r31, r1
  c0:	10 82       	st	Z, r1
	adc_init(ADC_CK_DIV128);
	
	
	
	
	for(j = 0; j < DAMPER_BUFFER; j++)
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	f5 cf       	rjmp	.-22     	; 0xb0 <main+0x4c>
	
	
	
    while (1) 
    {
		Reset_WDT(); //Monsieur l'arbitre(pour vérifier que le programme n'est pas planté ^^)
  c6:	a8 95       	wdr
		/*
		Try to think here will be the console to setup new parameters for BM64
		that can be applied after reset(in setup mode of course)
		Otherwise, run application -> read ADC to switch on/off multiplexer gate
		*/
		ADC_BUFFER[0] = adc_read_8(); //fill buffer step by step
  c8:	f4 d0       	rcall	.+488    	; 0x2b2 <_Z10adc_read_8v>
  ca:	8b ab       	std	Y+51, r24	; 0x33
		j = DAMPER_BUFFER - 1;
  cc:	93 e1       	ldi	r25, 0x13	; 19
		averageValue = 0; // reset value for new average value
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
		while(j > 0)
  d2:	99 23       	and	r25, r25
  d4:	b9 f0       	breq	.+46     	; 0x104 <main+0xa0>
		{
			averageValue += ADC_BUFFER[j];
  d6:	29 2f       	mov	r18, r25
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	a3 e3       	ldi	r26, 0x33	; 51
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ac 0f       	add	r26, r28
  e0:	bd 1f       	adc	r27, r29
  e2:	a2 0f       	add	r26, r18
  e4:	b3 1f       	adc	r27, r19
  e6:	8c 91       	ld	r24, X
  e8:	48 0f       	add	r20, r24
  ea:	51 1d       	adc	r21, r1
			ADC_BUFFER[j] = ADC_BUFFER[j-1];
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	31 09       	sbc	r19, r1
  f0:	e3 e3       	ldi	r30, 0x33	; 51
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ec 0f       	add	r30, r28
  f6:	fd 1f       	adc	r31, r29
  f8:	e2 0f       	add	r30, r18
  fa:	f3 1f       	adc	r31, r19
  fc:	80 81       	ld	r24, Z
  fe:	8c 93       	st	X, r24
			j--;
 100:	91 50       	subi	r25, 0x01	; 1
		Otherwise, run application -> read ADC to switch on/off multiplexer gate
		*/
		ADC_BUFFER[0] = adc_read_8(); //fill buffer step by step
		j = DAMPER_BUFFER - 1;
		averageValue = 0; // reset value for new average value
		while(j > 0)
 102:	e7 cf       	rjmp	.-50     	; 0xd2 <main+0x6e>
		{
			averageValue += ADC_BUFFER[j];
			ADC_BUFFER[j] = ADC_BUFFER[j-1];
			j--;
		}
		averageValue /= DAMPER_BUFFER; //divide might slow the loop...
 104:	ca 01       	movw	r24, r20
 106:	64 e1       	ldi	r22, 0x14	; 20
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	da d0       	rcall	.+436    	; 0x2c0 <__udivmodhi4>
		
		sprintf(buf, "EEA en Morse donne ---> . . ._\t %d  %d\r\n", averageValue, ADC_BUFFER[0]); //Gonna try a madness, like we said in french "une dinguerie"
 10c:	8b a9       	ldd	r24, Y+51	; 0x33
 10e:	1f 92       	push	r1
 110:	8f 93       	push	r24
 112:	7f 93       	push	r23
 114:	6f 93       	push	r22
 116:	87 e0       	ldi	r24, 0x07	; 7
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	9f 93       	push	r25
 11c:	8f 93       	push	r24
 11e:	8e 01       	movw	r16, r28
 120:	0f 5f       	subi	r16, 0xFF	; 255
 122:	1f 4f       	sbci	r17, 0xFF	; 255
 124:	1f 93       	push	r17
 126:	0f 93       	push	r16
 128:	df d0       	rcall	.+446    	; 0x2e8 <sprintf>
		print(buf); //Try to call an Aware function
 12a:	c8 01       	movw	r24, r16
 12c:	29 d0       	rcall	.+82     	; 0x180 <_Z5printPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	9e e4       	ldi	r25, 0x4E	; 78
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0xce>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xd4>
 138:	00 00       	nop
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	c0 cf       	rjmp	.-128    	; 0xc6 <main+0x62>

00000146 <_Z12USART_Init_0j>:
{
	// En attente du flag RXC (Receive Complete p.181)
	while ( !(UCSR1A & (1<<RXC1)) );
	//Lecture du buffer dans le registre UDR
	return UDR1;
}
 146:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__TEXT_REGION_LENGTH__+0x7fe082>
 14a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fe081>
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
 154:	8e e0       	ldi	r24, 0x0E	; 14
 156:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
 15a:	08 95       	ret

0000015c <_Z12USART_Init_1j>:
 15c:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <__TEXT_REGION_LENGTH__+0x7fe092>
 160:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7fe091>
 164:	88 e1       	ldi	r24, 0x18	; 24
 166:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7fe095>
 16a:	8e e0       	ldi	r24, 0x0E	; 14
 16c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7fe094>
 170:	08 95       	ret

00000172 <_Z16USART_Transmit_1h>:
 172:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7fe096>
 176:	95 ff       	sbrs	r25, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <_Z16USART_Transmit_1h>
 17a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7fe090>
 17e:	08 95       	ret

00000180 <_Z5printPKc>:




void print(const char *c)//Try to create an Aware function
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	8c 01       	movw	r16, r24
	//Un warning concerne la conversion de String const vers char*, ceci dit, ça fonctionne...

	int i = 0;
 18a:	c0 e0       	ldi	r28, 0x00	; 0
 18c:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(c[i] != '\0')
 18e:	f8 01       	movw	r30, r16
 190:	ec 0f       	add	r30, r28
 192:	fd 1f       	adc	r31, r29
 194:	80 81       	ld	r24, Z
 196:	88 23       	and	r24, r24
 198:	19 f0       	breq	.+6      	; 0x1a0 <_Z5printPKc+0x20>
	{
	USART_Transmit_1(c[i]);
 19a:	eb df       	rcall	.-42     	; 0x172 <_Z16USART_Transmit_1h>
	i++;	
 19c:	21 96       	adiw	r28, 0x01	; 1
{
	//Un warning concerne la conversion de String const vers char*, ceci dit, ça fonctionne...

	int i = 0;
	
	while(c[i] != '\0')
 19e:	f7 cf       	rjmp	.-18     	; 0x18e <_Z5printPKc+0xe>
	{
	USART_Transmit_1(c[i]);
	i++;	
	}	
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <_Z15Enable_WatchDogh>:
//Watch Dog Functions


void Enable_WatchDog(uint8_t time_preset)
{
	MCUSR = 0; //reset status register
 1aa:	14 be       	out	0x34, r1	; 52
	WDTCSR = (1<<WDE) | time_preset; //Enable watchdog - and set preset on prescaler
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	81 bd       	out	0x21, r24	; 33
 1b0:	08 95       	ret

000001b2 <_Z14showResetCausev>:




void showResetCause(void)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	uint8_t resetReg = MCUSR;
 1b8:	14 b7       	in	r17, 0x34	; 52
	print("MCUSR : ");
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	e0 df       	rcall	.-64     	; 0x180 <_Z5printPKc>
	for(uint8_t i = 0x40; i > 0; i>>=1)
 1c0:	c0 e4       	ldi	r28, 0x40	; 64
 1c2:	cc 23       	and	r28, r28
 1c4:	31 f1       	breq	.+76     	; 0x212 <__DATA_REGION_LENGTH__+0x12>
	{
		switch(resetReg & i)
 1c6:	dc 2f       	mov	r29, r28
 1c8:	d1 23       	and	r29, r17
 1ca:	d2 30       	cpi	r29, 0x02	; 2
 1cc:	81 f0       	breq	.+32     	; 0x1ee <_Z14showResetCausev+0x3c>
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <_Z14showResetCausev+0x24>
 1d0:	d1 30       	cpi	r29, 0x01	; 1
 1d2:	89 f0       	breq	.+34     	; 0x1f6 <_Z14showResetCausev+0x44>
 1d4:	13 c0       	rjmp	.+38     	; 0x1fc <_Z14showResetCausev+0x4a>
 1d6:	d4 30       	cpi	r29, 0x04	; 4
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <_Z14showResetCausev+0x34>
 1da:	d8 30       	cpi	r29, 0x08	; 8
 1dc:	79 f4       	brne	.+30     	; 0x1fc <_Z14showResetCausev+0x4a>
		{
			case WDR_FLAG:
			print(WDR_MESSAGE);
 1de:	89 e3       	ldi	r24, 0x39	; 57
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	ce df       	rcall	.-100    	; 0x180 <_Z5printPKc>
			break;
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <_Z14showResetCausev+0x4a>
			
			case BOR_FLAG:
			print(BOR_MESSAGE);
 1e6:	89 e4       	ldi	r24, 0x49	; 73
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	ca df       	rcall	.-108    	; 0x180 <_Z5printPKc>
			break;
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <_Z14showResetCausev+0x4a>
			
			case EXR_FLAG:
			print(EXR_MESSAGE);
 1ee:	89 e5       	ldi	r24, 0x59	; 89
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	c6 df       	rcall	.-116    	; 0x180 <_Z5printPKc>
			break;
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <_Z14showResetCausev+0x4a>
			
			case POR_FLAG:
			print(POR_MESSAGE);
 1f6:	89 e6       	ldi	r24, 0x69	; 105
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	c2 df       	rcall	.-124    	; 0x180 <_Z5printPKc>
			break;
		}
		if(resetReg & i)
 1fc:	dd 23       	and	r29, r29
 1fe:	19 f0       	breq	.+6      	; 0x206 <__DATA_REGION_LENGTH__+0x6>
		print("\n\r");
 200:	88 e7       	ldi	r24, 0x78	; 120
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	bd df       	rcall	.-134    	; 0x180 <_Z5printPKc>

void showResetCause(void)
{
	uint8_t resetReg = MCUSR;
	print("MCUSR : ");
	for(uint8_t i = 0x40; i > 0; i>>=1)
 206:	8c 2f       	mov	r24, r28
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	95 95       	asr	r25
 20c:	87 95       	ror	r24
 20e:	c8 2f       	mov	r28, r24
 210:	d8 cf       	rjmp	.-80     	; 0x1c2 <_Z14showResetCausev+0x10>
			break;
		}
		if(resetReg & i)
		print("\n\r");
	}
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	08 95       	ret

0000021a <_Z10readEEPROMh>:
//EEPROM Functions

uint8_t readEEPROM(uint8_t addr)
{
	// Check if there no process on eeprom
	while(EECR & (1<<EEPE));
 21a:	e1 99       	sbic	0x1c, 1	; 28
 21c:	fe cf       	rjmp	.-4      	; 0x21a <_Z10readEEPROMh>
	//Put Addess
	EEAR = addr;
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	9f bb       	out	0x1f, r25	; 31
 222:	8e bb       	out	0x1e, r24	; 30
	//Start read value on eeprom address -> that stored in EEDR
	EECR |= (1<<EERE);
 224:	8c b3       	in	r24, 0x1c	; 28
 226:	81 60       	ori	r24, 0x01	; 1
 228:	8c bb       	out	0x1c, r24	; 28
	return EEDR; 
 22a:	8d b3       	in	r24, 0x1d	; 29
}
 22c:	08 95       	ret

0000022e <_Z11writeEEPROMhh>:


void writeEEPROM(uint8_t addr, uint8_t data)
{
	// Check if there no process on eeprom
	while(EECR & (1<<EEPE));
 22e:	e1 99       	sbic	0x1c, 1	; 28
 230:	fe cf       	rjmp	.-4      	; 0x22e <_Z11writeEEPROMhh>
	//Set programming mode (Atomic mode here, operation time ~3.4ms ---> datasheet p.23)
	EECR = (0<<EEPM1)|(0<<EEPM0);
 232:	1c ba       	out	0x1c, r1	; 28
	//Put address and data
	EEAR = addr;
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	9f bb       	out	0x1f, r25	; 31
 238:	8e bb       	out	0x1e, r24	; 30
	EEDR = data;
 23a:	6d bb       	out	0x1d, r22	; 29
	//Enable Write
	EECR |= (1<<EEMPE);
 23c:	8c b3       	in	r24, 0x1c	; 28
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	8c bb       	out	0x1c, r24	; 28
	//Write value
	EECR |= (1<<EEPE);
 242:	8c b3       	in	r24, 0x1c	; 28
 244:	82 60       	ori	r24, 0x02	; 2
 246:	8c bb       	out	0x1c, r24	; 28
 248:	08 95       	ret

0000024a <_Z11checkEEPROMv>:




uint8_t checkEEPROM(void)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	27 97       	sbiw	r28, 0x07	; 7
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
	uint8_t legalValues[] = {H2400_PRESET, H4800_PRESET, H9600_PRESET, H19200_PRESET, H38400_PRESET, H57600_PRESET, H115200_PRESET};
 25e:	87 e0       	ldi	r24, 0x07	; 7
 260:	e0 e0       	ldi	r30, 0x00	; 0
 262:	f1 e0       	ldi	r31, 0x01	; 1
 264:	de 01       	movw	r26, r28
 266:	11 96       	adiw	r26, 0x01	; 1
 268:	01 90       	ld	r0, Z+
 26a:	0d 92       	st	X+, r0
 26c:	8a 95       	dec	r24
 26e:	e1 f7       	brne	.-8      	; 0x268 <_Z11checkEEPROMv+0x1e>
	uint8_t check = 1;
	uint8_t parameter = readEEPROM(SERIAL_PORT_PRESET);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	d3 df       	rcall	.-90     	; 0x21a <_Z10readEEPROMh>
	for(uint8_t i = 0; i < sizeof(legalValues); i++)
 274:	90 e0       	ldi	r25, 0x00	; 0


uint8_t checkEEPROM(void)
{
	uint8_t legalValues[] = {H2400_PRESET, H4800_PRESET, H9600_PRESET, H19200_PRESET, H38400_PRESET, H57600_PRESET, H115200_PRESET};
	uint8_t check = 1;
 276:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t parameter = readEEPROM(SERIAL_PORT_PRESET);
	for(uint8_t i = 0; i < sizeof(legalValues); i++)
 278:	97 30       	cpi	r25, 0x07	; 7
 27a:	60 f4       	brcc	.+24     	; 0x294 <_Z11checkEEPROMv+0x4a>
	{
		if(parameter != legalValues[i])
 27c:	e1 e0       	ldi	r30, 0x01	; 1
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ec 0f       	add	r30, r28
 282:	fd 1f       	adc	r31, r29
 284:	e9 0f       	add	r30, r25
 286:	f1 1d       	adc	r31, r1
 288:	20 81       	ld	r18, Z
 28a:	82 13       	cpse	r24, r18
		check = 0;
 28c:	30 e0       	ldi	r19, 0x00	; 0
		Reset_WDT(); //need this to prevent watchdog system reset (even we have speed sequence)
 28e:	a8 95       	wdr
uint8_t checkEEPROM(void)
{
	uint8_t legalValues[] = {H2400_PRESET, H4800_PRESET, H9600_PRESET, H19200_PRESET, H38400_PRESET, H57600_PRESET, H115200_PRESET};
	uint8_t check = 1;
	uint8_t parameter = readEEPROM(SERIAL_PORT_PRESET);
	for(uint8_t i = 0; i < sizeof(legalValues); i++)
 290:	9f 5f       	subi	r25, 0xFF	; 255
 292:	f2 cf       	rjmp	.-28     	; 0x278 <_Z11checkEEPROMv+0x2e>
		check = 0;
		Reset_WDT(); //need this to prevent watchdog system reset (even we have speed sequence)
	}
	
	return check;
}
 294:	83 2f       	mov	r24, r19
 296:	27 96       	adiw	r28, 0x07	; 7
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <_Z8adc_inith>:
//ADC functions


void adc_init(uint8_t sampleRate)
{
	ADCSRB = (1<<ADLAR); //bit LSB bits into ADCL register -> We will only read 8 bits with ADCR registers (cause of error quantification +/-0.5LSB) (datasheet p.142 / p.147)
 2a8:	98 e0       	ldi	r25, 0x08	; 8
 2aa:	94 b9       	out	0x04, r25	; 4
	ADCSRA = sampleRate | (1<<ADEN); //enable adc and set adc frequency divider
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	85 b9       	out	0x05, r24	; 5
 2b0:	08 95       	ret

000002b2 <_Z10adc_read_8v>:
}


uint8_t adc_read_8(void)
{
	ADCSRA |= (1<<ADSC); //start conversion
 2b2:	85 b1       	in	r24, 0x05	; 5
 2b4:	80 64       	ori	r24, 0x40	; 64
 2b6:	85 b9       	out	0x05, r24	; 5
	while(ADCSRA & (1<<ADSC)); //wait for conversion complete (datasheet p.142)
 2b8:	2e 99       	sbic	0x05, 6	; 5
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <_Z10adc_read_8v+0x6>
	
	return ADCH; //return adc conversion (8 bits)
 2bc:	87 b1       	in	r24, 0x07	; 7
}
 2be:	08 95       	ret

000002c0 <__udivmodhi4>:
 2c0:	aa 1b       	sub	r26, r26
 2c2:	bb 1b       	sub	r27, r27
 2c4:	51 e1       	ldi	r21, 0x11	; 17
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <__udivmodhi4_ep>

000002c8 <__udivmodhi4_loop>:
 2c8:	aa 1f       	adc	r26, r26
 2ca:	bb 1f       	adc	r27, r27
 2cc:	a6 17       	cp	r26, r22
 2ce:	b7 07       	cpc	r27, r23
 2d0:	10 f0       	brcs	.+4      	; 0x2d6 <__udivmodhi4_ep>
 2d2:	a6 1b       	sub	r26, r22
 2d4:	b7 0b       	sbc	r27, r23

000002d6 <__udivmodhi4_ep>:
 2d6:	88 1f       	adc	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	5a 95       	dec	r21
 2dc:	a9 f7       	brne	.-22     	; 0x2c8 <__udivmodhi4_loop>
 2de:	80 95       	com	r24
 2e0:	90 95       	com	r25
 2e2:	bc 01       	movw	r22, r24
 2e4:	cd 01       	movw	r24, r26
 2e6:	08 95       	ret

000002e8 <sprintf>:
 2e8:	ae e0       	ldi	r26, 0x0E	; 14
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e9 e7       	ldi	r30, 0x79	; 121
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	b6 c2       	rjmp	.+1388   	; 0x85e <__prologue_saves__+0x1c>
 2f2:	0d 89       	ldd	r16, Y+21	; 0x15
 2f4:	1e 89       	ldd	r17, Y+22	; 0x16
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	8c 83       	std	Y+4, r24	; 0x04
 2fa:	1a 83       	std	Y+2, r17	; 0x02
 2fc:	09 83       	std	Y+1, r16	; 0x01
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	9f e7       	ldi	r25, 0x7F	; 127
 302:	9e 83       	std	Y+6, r25	; 0x06
 304:	8d 83       	std	Y+5, r24	; 0x05
 306:	ae 01       	movw	r20, r28
 308:	47 5e       	subi	r20, 0xE7	; 231
 30a:	5f 4f       	sbci	r21, 0xFF	; 255
 30c:	6f 89       	ldd	r22, Y+23	; 0x17
 30e:	78 8d       	ldd	r23, Y+24	; 0x18
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	08 d0       	rcall	.+16     	; 0x326 <vfprintf>
 316:	ef 81       	ldd	r30, Y+7	; 0x07
 318:	f8 85       	ldd	r31, Y+8	; 0x08
 31a:	e0 0f       	add	r30, r16
 31c:	f1 1f       	adc	r31, r17
 31e:	10 82       	st	Z, r1
 320:	2e 96       	adiw	r28, 0x0e	; 14
 322:	e4 e0       	ldi	r30, 0x04	; 4
 324:	b8 c2       	rjmp	.+1392   	; 0x896 <__epilogue_restores__+0x1c>

00000326 <vfprintf>:
 326:	ab e0       	ldi	r26, 0x0B	; 11
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e8 e9       	ldi	r30, 0x98	; 152
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	89 c2       	rjmp	.+1298   	; 0x842 <__prologue_saves__>
 330:	6c 01       	movw	r12, r24
 332:	7b 01       	movw	r14, r22
 334:	8a 01       	movw	r16, r20
 336:	fc 01       	movw	r30, r24
 338:	17 82       	std	Z+7, r1	; 0x07
 33a:	16 82       	std	Z+6, r1	; 0x06
 33c:	83 81       	ldd	r24, Z+3	; 0x03
 33e:	81 ff       	sbrs	r24, 1
 340:	c0 c1       	rjmp	.+896    	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	3c 01       	movw	r6, r24
 348:	f6 01       	movw	r30, r12
 34a:	93 81       	ldd	r25, Z+3	; 0x03
 34c:	f7 01       	movw	r30, r14
 34e:	93 fd       	sbrc	r25, 3
 350:	85 91       	lpm	r24, Z+
 352:	93 ff       	sbrs	r25, 3
 354:	81 91       	ld	r24, Z+
 356:	7f 01       	movw	r14, r30
 358:	88 23       	and	r24, r24
 35a:	09 f4       	brne	.+2      	; 0x35e <vfprintf+0x38>
 35c:	ae c1       	rjmp	.+860    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 35e:	85 32       	cpi	r24, 0x25	; 37
 360:	39 f4       	brne	.+14     	; 0x370 <vfprintf+0x4a>
 362:	93 fd       	sbrc	r25, 3
 364:	85 91       	lpm	r24, Z+
 366:	93 ff       	sbrs	r25, 3
 368:	81 91       	ld	r24, Z+
 36a:	7f 01       	movw	r14, r30
 36c:	85 32       	cpi	r24, 0x25	; 37
 36e:	21 f4       	brne	.+8      	; 0x378 <vfprintf+0x52>
 370:	b6 01       	movw	r22, r12
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	c1 d1       	rcall	.+898    	; 0x6f8 <fputc>
 376:	e8 cf       	rjmp	.-48     	; 0x348 <vfprintf+0x22>
 378:	91 2c       	mov	r9, r1
 37a:	21 2c       	mov	r2, r1
 37c:	31 2c       	mov	r3, r1
 37e:	ff e1       	ldi	r31, 0x1F	; 31
 380:	f3 15       	cp	r31, r3
 382:	e0 f0       	brcs	.+56     	; 0x3bc <vfprintf+0x96>
 384:	8b 32       	cpi	r24, 0x2B	; 43
 386:	79 f0       	breq	.+30     	; 0x3a6 <vfprintf+0x80>
 388:	38 f4       	brcc	.+14     	; 0x398 <vfprintf+0x72>
 38a:	80 32       	cpi	r24, 0x20	; 32
 38c:	79 f0       	breq	.+30     	; 0x3ac <vfprintf+0x86>
 38e:	83 32       	cpi	r24, 0x23	; 35
 390:	a9 f4       	brne	.+42     	; 0x3bc <vfprintf+0x96>
 392:	23 2d       	mov	r18, r3
 394:	20 61       	ori	r18, 0x10	; 16
 396:	10 c0       	rjmp	.+32     	; 0x3b8 <vfprintf+0x92>
 398:	8d 32       	cpi	r24, 0x2D	; 45
 39a:	59 f0       	breq	.+22     	; 0x3b2 <vfprintf+0x8c>
 39c:	80 33       	cpi	r24, 0x30	; 48
 39e:	71 f4       	brne	.+28     	; 0x3bc <vfprintf+0x96>
 3a0:	23 2d       	mov	r18, r3
 3a2:	21 60       	ori	r18, 0x01	; 1
 3a4:	09 c0       	rjmp	.+18     	; 0x3b8 <vfprintf+0x92>
 3a6:	83 2d       	mov	r24, r3
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	38 2e       	mov	r3, r24
 3ac:	e3 2d       	mov	r30, r3
 3ae:	e4 60       	ori	r30, 0x04	; 4
 3b0:	22 c0       	rjmp	.+68     	; 0x3f6 <vfprintf+0xd0>
 3b2:	f3 2d       	mov	r31, r3
 3b4:	f8 60       	ori	r31, 0x08	; 8
 3b6:	25 c0       	rjmp	.+74     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3b8:	32 2e       	mov	r3, r18
 3ba:	27 c0       	rjmp	.+78     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3bc:	37 fc       	sbrc	r3, 7
 3be:	2d c0       	rjmp	.+90     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3c0:	20 ed       	ldi	r18, 0xD0	; 208
 3c2:	28 0f       	add	r18, r24
 3c4:	2a 30       	cpi	r18, 0x0A	; 10
 3c6:	88 f4       	brcc	.+34     	; 0x3ea <vfprintf+0xc4>
 3c8:	36 fe       	sbrs	r3, 6
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <vfprintf+0xb2>
 3cc:	89 2d       	mov	r24, r9
 3ce:	6a e0       	ldi	r22, 0x0A	; 10
 3d0:	2f d2       	rcall	.+1118   	; 0x830 <__mulqi3>
 3d2:	92 2e       	mov	r9, r18
 3d4:	98 0e       	add	r9, r24
 3d6:	19 c0       	rjmp	.+50     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3d8:	82 2d       	mov	r24, r2
 3da:	6a e0       	ldi	r22, 0x0A	; 10
 3dc:	29 d2       	rcall	.+1106   	; 0x830 <__mulqi3>
 3de:	22 2e       	mov	r2, r18
 3e0:	28 0e       	add	r2, r24
 3e2:	83 2d       	mov	r24, r3
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	38 2e       	mov	r3, r24
 3e8:	10 c0       	rjmp	.+32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ea:	8e 32       	cpi	r24, 0x2E	; 46
 3ec:	31 f4       	brne	.+12     	; 0x3fa <vfprintf+0xd4>
 3ee:	36 fc       	sbrc	r3, 6
 3f0:	64 c1       	rjmp	.+712    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 3f2:	e3 2d       	mov	r30, r3
 3f4:	e0 64       	ori	r30, 0x40	; 64
 3f6:	3e 2e       	mov	r3, r30
 3f8:	08 c0       	rjmp	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fa:	8c 36       	cpi	r24, 0x6C	; 108
 3fc:	21 f4       	brne	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	f3 2d       	mov	r31, r3
 400:	f0 68       	ori	r31, 0x80	; 128
 402:	3f 2e       	mov	r3, r31
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	88 36       	cpi	r24, 0x68	; 104
 408:	41 f4       	brne	.+16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40a:	f7 01       	movw	r30, r14
 40c:	93 fd       	sbrc	r25, 3
 40e:	85 91       	lpm	r24, Z+
 410:	93 ff       	sbrs	r25, 3
 412:	81 91       	ld	r24, Z+
 414:	7f 01       	movw	r14, r30
 416:	81 11       	cpse	r24, r1
 418:	b2 cf       	rjmp	.-156    	; 0x37e <vfprintf+0x58>
 41a:	98 2f       	mov	r25, r24
 41c:	9f 7d       	andi	r25, 0xDF	; 223
 41e:	95 54       	subi	r25, 0x45	; 69
 420:	93 30       	cpi	r25, 0x03	; 3
 422:	28 f4       	brcc	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 424:	0c 5f       	subi	r16, 0xFC	; 252
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	2f e3       	ldi	r18, 0x3F	; 63
 42a:	29 83       	std	Y+1, r18	; 0x01
 42c:	0d c0       	rjmp	.+26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 42e:	83 36       	cpi	r24, 0x63	; 99
 430:	31 f0       	breq	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 432:	83 37       	cpi	r24, 0x73	; 115
 434:	71 f0       	breq	.+28     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 436:	83 35       	cpi	r24, 0x53	; 83
 438:	09 f0       	breq	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43a:	55 c0       	rjmp	.+170    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 43c:	20 c0       	rjmp	.+64     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 43e:	f8 01       	movw	r30, r16
 440:	80 81       	ld	r24, Z
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	0e 5f       	subi	r16, 0xFE	; 254
 446:	1f 4f       	sbci	r17, 0xFF	; 255
 448:	88 24       	eor	r8, r8
 44a:	83 94       	inc	r8
 44c:	91 2c       	mov	r9, r1
 44e:	53 01       	movw	r10, r6
 450:	12 c0       	rjmp	.+36     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 452:	28 01       	movw	r4, r16
 454:	f2 e0       	ldi	r31, 0x02	; 2
 456:	4f 0e       	add	r4, r31
 458:	51 1c       	adc	r5, r1
 45a:	f8 01       	movw	r30, r16
 45c:	a0 80       	ld	r10, Z
 45e:	b1 80       	ldd	r11, Z+1	; 0x01
 460:	36 fe       	sbrs	r3, 6
 462:	03 c0       	rjmp	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 464:	69 2d       	mov	r22, r9
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46a:	6f ef       	ldi	r22, 0xFF	; 255
 46c:	7f ef       	ldi	r23, 0xFF	; 255
 46e:	c5 01       	movw	r24, r10
 470:	38 d1       	rcall	.+624    	; 0x6e2 <strnlen>
 472:	4c 01       	movw	r8, r24
 474:	82 01       	movw	r16, r4
 476:	f3 2d       	mov	r31, r3
 478:	ff 77       	andi	r31, 0x7F	; 127
 47a:	3f 2e       	mov	r3, r31
 47c:	15 c0       	rjmp	.+42     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 47e:	28 01       	movw	r4, r16
 480:	22 e0       	ldi	r18, 0x02	; 2
 482:	42 0e       	add	r4, r18
 484:	51 1c       	adc	r5, r1
 486:	f8 01       	movw	r30, r16
 488:	a0 80       	ld	r10, Z
 48a:	b1 80       	ldd	r11, Z+1	; 0x01
 48c:	36 fe       	sbrs	r3, 6
 48e:	03 c0       	rjmp	.+6      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 490:	69 2d       	mov	r22, r9
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 496:	6f ef       	ldi	r22, 0xFF	; 255
 498:	7f ef       	ldi	r23, 0xFF	; 255
 49a:	c5 01       	movw	r24, r10
 49c:	17 d1       	rcall	.+558    	; 0x6cc <strnlen_P>
 49e:	4c 01       	movw	r8, r24
 4a0:	f3 2d       	mov	r31, r3
 4a2:	f0 68       	ori	r31, 0x80	; 128
 4a4:	3f 2e       	mov	r3, r31
 4a6:	82 01       	movw	r16, r4
 4a8:	33 fc       	sbrc	r3, 3
 4aa:	19 c0       	rjmp	.+50     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4ac:	82 2d       	mov	r24, r2
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	88 16       	cp	r8, r24
 4b2:	99 06       	cpc	r9, r25
 4b4:	a0 f4       	brcc	.+40     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4b6:	b6 01       	movw	r22, r12
 4b8:	80 e2       	ldi	r24, 0x20	; 32
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	1d d1       	rcall	.+570    	; 0x6f8 <fputc>
 4be:	2a 94       	dec	r2
 4c0:	f5 cf       	rjmp	.-22     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4c2:	f5 01       	movw	r30, r10
 4c4:	37 fc       	sbrc	r3, 7
 4c6:	85 91       	lpm	r24, Z+
 4c8:	37 fe       	sbrs	r3, 7
 4ca:	81 91       	ld	r24, Z+
 4cc:	5f 01       	movw	r10, r30
 4ce:	b6 01       	movw	r22, r12
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	12 d1       	rcall	.+548    	; 0x6f8 <fputc>
 4d4:	21 10       	cpse	r2, r1
 4d6:	2a 94       	dec	r2
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	82 1a       	sub	r8, r18
 4dc:	91 08       	sbc	r9, r1
 4de:	81 14       	cp	r8, r1
 4e0:	91 04       	cpc	r9, r1
 4e2:	79 f7       	brne	.-34     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4e4:	e1 c0       	rjmp	.+450    	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 4e6:	84 36       	cpi	r24, 0x64	; 100
 4e8:	11 f0       	breq	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ea:	89 36       	cpi	r24, 0x69	; 105
 4ec:	39 f5       	brne	.+78     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 4ee:	f8 01       	movw	r30, r16
 4f0:	37 fe       	sbrs	r3, 7
 4f2:	07 c0       	rjmp	.+14     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4f4:	60 81       	ld	r22, Z
 4f6:	71 81       	ldd	r23, Z+1	; 0x01
 4f8:	82 81       	ldd	r24, Z+2	; 0x02
 4fa:	93 81       	ldd	r25, Z+3	; 0x03
 4fc:	0c 5f       	subi	r16, 0xFC	; 252
 4fe:	1f 4f       	sbci	r17, 0xFF	; 255
 500:	08 c0       	rjmp	.+16     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 502:	60 81       	ld	r22, Z
 504:	71 81       	ldd	r23, Z+1	; 0x01
 506:	07 2e       	mov	r0, r23
 508:	00 0c       	add	r0, r0
 50a:	88 0b       	sbc	r24, r24
 50c:	99 0b       	sbc	r25, r25
 50e:	0e 5f       	subi	r16, 0xFE	; 254
 510:	1f 4f       	sbci	r17, 0xFF	; 255
 512:	f3 2d       	mov	r31, r3
 514:	ff 76       	andi	r31, 0x6F	; 111
 516:	3f 2e       	mov	r3, r31
 518:	97 ff       	sbrs	r25, 7
 51a:	09 c0       	rjmp	.+18     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 51c:	90 95       	com	r25
 51e:	80 95       	com	r24
 520:	70 95       	com	r23
 522:	61 95       	neg	r22
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	8f 4f       	sbci	r24, 0xFF	; 255
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	f0 68       	ori	r31, 0x80	; 128
 52c:	3f 2e       	mov	r3, r31
 52e:	2a e0       	ldi	r18, 0x0A	; 10
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	a3 01       	movw	r20, r6
 534:	1d d1       	rcall	.+570    	; 0x770 <__ultoa_invert>
 536:	88 2e       	mov	r8, r24
 538:	86 18       	sub	r8, r6
 53a:	44 c0       	rjmp	.+136    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 53c:	85 37       	cpi	r24, 0x75	; 117
 53e:	31 f4       	brne	.+12     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 540:	23 2d       	mov	r18, r3
 542:	2f 7e       	andi	r18, 0xEF	; 239
 544:	b2 2e       	mov	r11, r18
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	25 c0       	rjmp	.+74     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 54c:	93 2d       	mov	r25, r3
 54e:	99 7f       	andi	r25, 0xF9	; 249
 550:	b9 2e       	mov	r11, r25
 552:	8f 36       	cpi	r24, 0x6F	; 111
 554:	c1 f0       	breq	.+48     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 556:	18 f4       	brcc	.+6      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 558:	88 35       	cpi	r24, 0x58	; 88
 55a:	79 f0       	breq	.+30     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 55c:	ae c0       	rjmp	.+348    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 55e:	80 37       	cpi	r24, 0x70	; 112
 560:	19 f0       	breq	.+6      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 562:	88 37       	cpi	r24, 0x78	; 120
 564:	21 f0       	breq	.+8      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 566:	a9 c0       	rjmp	.+338    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
 568:	e9 2f       	mov	r30, r25
 56a:	e0 61       	ori	r30, 0x10	; 16
 56c:	be 2e       	mov	r11, r30
 56e:	b4 fe       	sbrs	r11, 4
 570:	0d c0       	rjmp	.+26     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 572:	fb 2d       	mov	r31, r11
 574:	f4 60       	ori	r31, 0x04	; 4
 576:	bf 2e       	mov	r11, r31
 578:	09 c0       	rjmp	.+18     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 57a:	34 fe       	sbrs	r3, 4
 57c:	0a c0       	rjmp	.+20     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 57e:	29 2f       	mov	r18, r25
 580:	26 60       	ori	r18, 0x06	; 6
 582:	b2 2e       	mov	r11, r18
 584:	06 c0       	rjmp	.+12     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 586:	28 e0       	ldi	r18, 0x08	; 8
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	05 c0       	rjmp	.+10     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 58c:	20 e1       	ldi	r18, 0x10	; 16
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 592:	20 e1       	ldi	r18, 0x10	; 16
 594:	32 e0       	ldi	r19, 0x02	; 2
 596:	f8 01       	movw	r30, r16
 598:	b7 fe       	sbrs	r11, 7
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 59c:	60 81       	ld	r22, Z
 59e:	71 81       	ldd	r23, Z+1	; 0x01
 5a0:	82 81       	ldd	r24, Z+2	; 0x02
 5a2:	93 81       	ldd	r25, Z+3	; 0x03
 5a4:	0c 5f       	subi	r16, 0xFC	; 252
 5a6:	1f 4f       	sbci	r17, 0xFF	; 255
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5aa:	60 81       	ld	r22, Z
 5ac:	71 81       	ldd	r23, Z+1	; 0x01
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 5f       	subi	r16, 0xFE	; 254
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
 5b6:	a3 01       	movw	r20, r6
 5b8:	db d0       	rcall	.+438    	; 0x770 <__ultoa_invert>
 5ba:	88 2e       	mov	r8, r24
 5bc:	86 18       	sub	r8, r6
 5be:	fb 2d       	mov	r31, r11
 5c0:	ff 77       	andi	r31, 0x7F	; 127
 5c2:	3f 2e       	mov	r3, r31
 5c4:	36 fe       	sbrs	r3, 6
 5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 5c8:	23 2d       	mov	r18, r3
 5ca:	2e 7f       	andi	r18, 0xFE	; 254
 5cc:	a2 2e       	mov	r10, r18
 5ce:	89 14       	cp	r8, r9
 5d0:	58 f4       	brcc	.+22     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5d2:	34 fe       	sbrs	r3, 4
 5d4:	0b c0       	rjmp	.+22     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5d6:	32 fc       	sbrc	r3, 2
 5d8:	09 c0       	rjmp	.+18     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5da:	83 2d       	mov	r24, r3
 5dc:	8e 7e       	andi	r24, 0xEE	; 238
 5de:	a8 2e       	mov	r10, r24
 5e0:	05 c0       	rjmp	.+10     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5e2:	b8 2c       	mov	r11, r8
 5e4:	a3 2c       	mov	r10, r3
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5e8:	b8 2c       	mov	r11, r8
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 5ec:	b9 2c       	mov	r11, r9
 5ee:	a4 fe       	sbrs	r10, 4
 5f0:	0f c0       	rjmp	.+30     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5f2:	fe 01       	movw	r30, r28
 5f4:	e8 0d       	add	r30, r8
 5f6:	f1 1d       	adc	r31, r1
 5f8:	80 81       	ld	r24, Z
 5fa:	80 33       	cpi	r24, 0x30	; 48
 5fc:	21 f4       	brne	.+8      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5fe:	9a 2d       	mov	r25, r10
 600:	99 7e       	andi	r25, 0xE9	; 233
 602:	a9 2e       	mov	r10, r25
 604:	09 c0       	rjmp	.+18     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 606:	a2 fe       	sbrs	r10, 2
 608:	06 c0       	rjmp	.+12     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 60a:	b3 94       	inc	r11
 60c:	b3 94       	inc	r11
 60e:	04 c0       	rjmp	.+8      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 610:	8a 2d       	mov	r24, r10
 612:	86 78       	andi	r24, 0x86	; 134
 614:	09 f0       	breq	.+2      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 616:	b3 94       	inc	r11
 618:	a3 fc       	sbrc	r10, 3
 61a:	10 c0       	rjmp	.+32     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 61c:	a0 fe       	sbrs	r10, 0
 61e:	06 c0       	rjmp	.+12     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 620:	b2 14       	cp	r11, r2
 622:	80 f4       	brcc	.+32     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 624:	28 0c       	add	r2, r8
 626:	92 2c       	mov	r9, r2
 628:	9b 18       	sub	r9, r11
 62a:	0d c0       	rjmp	.+26     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 62c:	b2 14       	cp	r11, r2
 62e:	58 f4       	brcc	.+22     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 630:	b6 01       	movw	r22, r12
 632:	80 e2       	ldi	r24, 0x20	; 32
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	60 d0       	rcall	.+192    	; 0x6f8 <fputc>
 638:	b3 94       	inc	r11
 63a:	f8 cf       	rjmp	.-16     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 63c:	b2 14       	cp	r11, r2
 63e:	18 f4       	brcc	.+6      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 640:	2b 18       	sub	r2, r11
 642:	02 c0       	rjmp	.+4      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 644:	98 2c       	mov	r9, r8
 646:	21 2c       	mov	r2, r1
 648:	a4 fe       	sbrs	r10, 4
 64a:	0f c0       	rjmp	.+30     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 64c:	b6 01       	movw	r22, r12
 64e:	80 e3       	ldi	r24, 0x30	; 48
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	52 d0       	rcall	.+164    	; 0x6f8 <fputc>
 654:	a2 fe       	sbrs	r10, 2
 656:	16 c0       	rjmp	.+44     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 658:	a1 fc       	sbrc	r10, 1
 65a:	03 c0       	rjmp	.+6      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 65c:	88 e7       	ldi	r24, 0x78	; 120
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 662:	88 e5       	ldi	r24, 0x58	; 88
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	b6 01       	movw	r22, r12
 668:	0c c0       	rjmp	.+24     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 66a:	8a 2d       	mov	r24, r10
 66c:	86 78       	andi	r24, 0x86	; 134
 66e:	51 f0       	breq	.+20     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 670:	a1 fe       	sbrs	r10, 1
 672:	02 c0       	rjmp	.+4      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 674:	8b e2       	ldi	r24, 0x2B	; 43
 676:	01 c0       	rjmp	.+2      	; 0x67a <__LOCK_REGION_LENGTH__+0x27a>
 678:	80 e2       	ldi	r24, 0x20	; 32
 67a:	a7 fc       	sbrc	r10, 7
 67c:	8d e2       	ldi	r24, 0x2D	; 45
 67e:	b6 01       	movw	r22, r12
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	3a d0       	rcall	.+116    	; 0x6f8 <fputc>
 684:	89 14       	cp	r8, r9
 686:	30 f4       	brcc	.+12     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 688:	b6 01       	movw	r22, r12
 68a:	80 e3       	ldi	r24, 0x30	; 48
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	34 d0       	rcall	.+104    	; 0x6f8 <fputc>
 690:	9a 94       	dec	r9
 692:	f8 cf       	rjmp	.-16     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 694:	8a 94       	dec	r8
 696:	f3 01       	movw	r30, r6
 698:	e8 0d       	add	r30, r8
 69a:	f1 1d       	adc	r31, r1
 69c:	80 81       	ld	r24, Z
 69e:	b6 01       	movw	r22, r12
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	2a d0       	rcall	.+84     	; 0x6f8 <fputc>
 6a4:	81 10       	cpse	r8, r1
 6a6:	f6 cf       	rjmp	.-20     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 6a8:	22 20       	and	r2, r2
 6aa:	09 f4       	brne	.+2      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6ac:	4d ce       	rjmp	.-870    	; 0x348 <vfprintf+0x22>
 6ae:	b6 01       	movw	r22, r12
 6b0:	80 e2       	ldi	r24, 0x20	; 32
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	21 d0       	rcall	.+66     	; 0x6f8 <fputc>
 6b6:	2a 94       	dec	r2
 6b8:	f7 cf       	rjmp	.-18     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6ba:	f6 01       	movw	r30, r12
 6bc:	86 81       	ldd	r24, Z+6	; 0x06
 6be:	97 81       	ldd	r25, Z+7	; 0x07
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	9f ef       	ldi	r25, 0xFF	; 255
 6c6:	2b 96       	adiw	r28, 0x0b	; 11
 6c8:	e2 e1       	ldi	r30, 0x12	; 18
 6ca:	d7 c0       	rjmp	.+430    	; 0x87a <__epilogue_restores__>

000006cc <strnlen_P>:
 6cc:	fc 01       	movw	r30, r24
 6ce:	05 90       	lpm	r0, Z+
 6d0:	61 50       	subi	r22, 0x01	; 1
 6d2:	70 40       	sbci	r23, 0x00	; 0
 6d4:	01 10       	cpse	r0, r1
 6d6:	d8 f7       	brcc	.-10     	; 0x6ce <strnlen_P+0x2>
 6d8:	80 95       	com	r24
 6da:	90 95       	com	r25
 6dc:	8e 0f       	add	r24, r30
 6de:	9f 1f       	adc	r25, r31
 6e0:	08 95       	ret

000006e2 <strnlen>:
 6e2:	fc 01       	movw	r30, r24
 6e4:	61 50       	subi	r22, 0x01	; 1
 6e6:	70 40       	sbci	r23, 0x00	; 0
 6e8:	01 90       	ld	r0, Z+
 6ea:	01 10       	cpse	r0, r1
 6ec:	d8 f7       	brcc	.-10     	; 0x6e4 <strnlen+0x2>
 6ee:	80 95       	com	r24
 6f0:	90 95       	com	r25
 6f2:	8e 0f       	add	r24, r30
 6f4:	9f 1f       	adc	r25, r31
 6f6:	08 95       	ret

000006f8 <fputc>:
 6f8:	0f 93       	push	r16
 6fa:	1f 93       	push	r17
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	fb 01       	movw	r30, r22
 702:	23 81       	ldd	r18, Z+3	; 0x03
 704:	21 fd       	sbrc	r18, 1
 706:	03 c0       	rjmp	.+6      	; 0x70e <fputc+0x16>
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	9f ef       	ldi	r25, 0xFF	; 255
 70c:	2c c0       	rjmp	.+88     	; 0x766 <fputc+0x6e>
 70e:	22 ff       	sbrs	r18, 2
 710:	16 c0       	rjmp	.+44     	; 0x73e <fputc+0x46>
 712:	46 81       	ldd	r20, Z+6	; 0x06
 714:	57 81       	ldd	r21, Z+7	; 0x07
 716:	24 81       	ldd	r18, Z+4	; 0x04
 718:	35 81       	ldd	r19, Z+5	; 0x05
 71a:	42 17       	cp	r20, r18
 71c:	53 07       	cpc	r21, r19
 71e:	44 f4       	brge	.+16     	; 0x730 <fputc+0x38>
 720:	a0 81       	ld	r26, Z
 722:	b1 81       	ldd	r27, Z+1	; 0x01
 724:	9d 01       	movw	r18, r26
 726:	2f 5f       	subi	r18, 0xFF	; 255
 728:	3f 4f       	sbci	r19, 0xFF	; 255
 72a:	31 83       	std	Z+1, r19	; 0x01
 72c:	20 83       	st	Z, r18
 72e:	8c 93       	st	X, r24
 730:	26 81       	ldd	r18, Z+6	; 0x06
 732:	37 81       	ldd	r19, Z+7	; 0x07
 734:	2f 5f       	subi	r18, 0xFF	; 255
 736:	3f 4f       	sbci	r19, 0xFF	; 255
 738:	37 83       	std	Z+7, r19	; 0x07
 73a:	26 83       	std	Z+6, r18	; 0x06
 73c:	14 c0       	rjmp	.+40     	; 0x766 <fputc+0x6e>
 73e:	8b 01       	movw	r16, r22
 740:	ec 01       	movw	r28, r24
 742:	fb 01       	movw	r30, r22
 744:	00 84       	ldd	r0, Z+8	; 0x08
 746:	f1 85       	ldd	r31, Z+9	; 0x09
 748:	e0 2d       	mov	r30, r0
 74a:	09 95       	icall
 74c:	89 2b       	or	r24, r25
 74e:	e1 f6       	brne	.-72     	; 0x708 <fputc+0x10>
 750:	d8 01       	movw	r26, r16
 752:	16 96       	adiw	r26, 0x06	; 6
 754:	8d 91       	ld	r24, X+
 756:	9c 91       	ld	r25, X
 758:	17 97       	sbiw	r26, 0x07	; 7
 75a:	01 96       	adiw	r24, 0x01	; 1
 75c:	17 96       	adiw	r26, 0x07	; 7
 75e:	9c 93       	st	X, r25
 760:	8e 93       	st	-X, r24
 762:	16 97       	sbiw	r26, 0x06	; 6
 764:	ce 01       	movw	r24, r28
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	08 95       	ret

00000770 <__ultoa_invert>:
 770:	fa 01       	movw	r30, r20
 772:	aa 27       	eor	r26, r26
 774:	28 30       	cpi	r18, 0x08	; 8
 776:	61 f1       	breq	.+88     	; 0x7d0 <__ultoa_invert+0x60>
 778:	20 31       	cpi	r18, 0x10	; 16
 77a:	91 f1       	breq	.+100    	; 0x7e0 <__ultoa_invert+0x70>
 77c:	e8 94       	clt
 77e:	6f 93       	push	r22
 780:	6e 7f       	andi	r22, 0xFE	; 254
 782:	6e 5f       	subi	r22, 0xFE	; 254
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	af 4f       	sbci	r26, 0xFF	; 255
 78c:	b1 e0       	ldi	r27, 0x01	; 1
 78e:	40 d0       	rcall	.+128    	; 0x810 <__ultoa_invert+0xa0>
 790:	b4 e0       	ldi	r27, 0x04	; 4
 792:	3e d0       	rcall	.+124    	; 0x810 <__ultoa_invert+0xa0>
 794:	67 0f       	add	r22, r23
 796:	78 1f       	adc	r23, r24
 798:	89 1f       	adc	r24, r25
 79a:	9a 1f       	adc	r25, r26
 79c:	a1 1d       	adc	r26, r1
 79e:	68 0f       	add	r22, r24
 7a0:	79 1f       	adc	r23, r25
 7a2:	8a 1f       	adc	r24, r26
 7a4:	91 1d       	adc	r25, r1
 7a6:	a1 1d       	adc	r26, r1
 7a8:	6a 0f       	add	r22, r26
 7aa:	71 1d       	adc	r23, r1
 7ac:	81 1d       	adc	r24, r1
 7ae:	91 1d       	adc	r25, r1
 7b0:	a1 1d       	adc	r26, r1
 7b2:	22 d0       	rcall	.+68     	; 0x7f8 <__ultoa_invert+0x88>
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <__ultoa_invert+0x48>
 7b6:	68 94       	set
 7b8:	3f 91       	pop	r19
 7ba:	06 2e       	mov	r0, r22
 7bc:	00 0c       	add	r0, r0
 7be:	30 19       	sub	r19, r0
 7c0:	00 0c       	add	r0, r0
 7c2:	00 0c       	add	r0, r0
 7c4:	30 19       	sub	r19, r0
 7c6:	30 5d       	subi	r19, 0xD0	; 208
 7c8:	31 93       	st	Z+, r19
 7ca:	ce f6       	brtc	.-78     	; 0x77e <__ultoa_invert+0xe>
 7cc:	cf 01       	movw	r24, r30
 7ce:	08 95       	ret
 7d0:	46 2f       	mov	r20, r22
 7d2:	47 70       	andi	r20, 0x07	; 7
 7d4:	40 5d       	subi	r20, 0xD0	; 208
 7d6:	41 93       	st	Z+, r20
 7d8:	b3 e0       	ldi	r27, 0x03	; 3
 7da:	0f d0       	rcall	.+30     	; 0x7fa <__ultoa_invert+0x8a>
 7dc:	c9 f7       	brne	.-14     	; 0x7d0 <__ultoa_invert+0x60>
 7de:	f6 cf       	rjmp	.-20     	; 0x7cc <__ultoa_invert+0x5c>
 7e0:	46 2f       	mov	r20, r22
 7e2:	4f 70       	andi	r20, 0x0F	; 15
 7e4:	40 5d       	subi	r20, 0xD0	; 208
 7e6:	4a 33       	cpi	r20, 0x3A	; 58
 7e8:	18 f0       	brcs	.+6      	; 0x7f0 <__ultoa_invert+0x80>
 7ea:	49 5d       	subi	r20, 0xD9	; 217
 7ec:	31 fd       	sbrc	r19, 1
 7ee:	40 52       	subi	r20, 0x20	; 32
 7f0:	41 93       	st	Z+, r20
 7f2:	02 d0       	rcall	.+4      	; 0x7f8 <__ultoa_invert+0x88>
 7f4:	a9 f7       	brne	.-22     	; 0x7e0 <__ultoa_invert+0x70>
 7f6:	ea cf       	rjmp	.-44     	; 0x7cc <__ultoa_invert+0x5c>
 7f8:	b4 e0       	ldi	r27, 0x04	; 4
 7fa:	a6 95       	lsr	r26
 7fc:	97 95       	ror	r25
 7fe:	87 95       	ror	r24
 800:	77 95       	ror	r23
 802:	67 95       	ror	r22
 804:	ba 95       	dec	r27
 806:	c9 f7       	brne	.-14     	; 0x7fa <__ultoa_invert+0x8a>
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	61 05       	cpc	r22, r1
 80c:	71 05       	cpc	r23, r1
 80e:	08 95       	ret
 810:	9b 01       	movw	r18, r22
 812:	ac 01       	movw	r20, r24
 814:	0a 2e       	mov	r0, r26
 816:	06 94       	lsr	r0
 818:	57 95       	ror	r21
 81a:	47 95       	ror	r20
 81c:	37 95       	ror	r19
 81e:	27 95       	ror	r18
 820:	ba 95       	dec	r27
 822:	c9 f7       	brne	.-14     	; 0x816 <__ultoa_invert+0xa6>
 824:	62 0f       	add	r22, r18
 826:	73 1f       	adc	r23, r19
 828:	84 1f       	adc	r24, r20
 82a:	95 1f       	adc	r25, r21
 82c:	a0 1d       	adc	r26, r0
 82e:	08 95       	ret

00000830 <__mulqi3>:
 830:	00 24       	eor	r0, r0

00000832 <__mulqi3_loop>:
 832:	80 fd       	sbrc	r24, 0
 834:	06 0e       	add	r0, r22
 836:	66 0f       	add	r22, r22
 838:	11 f0       	breq	.+4      	; 0x83e <__mulqi3_exit>
 83a:	86 95       	lsr	r24
 83c:	d1 f7       	brne	.-12     	; 0x832 <__mulqi3_loop>

0000083e <__mulqi3_exit>:
 83e:	80 2d       	mov	r24, r0
 840:	08 95       	ret

00000842 <__prologue_saves__>:
 842:	2f 92       	push	r2
 844:	3f 92       	push	r3
 846:	4f 92       	push	r4
 848:	5f 92       	push	r5
 84a:	6f 92       	push	r6
 84c:	7f 92       	push	r7
 84e:	8f 92       	push	r8
 850:	9f 92       	push	r9
 852:	af 92       	push	r10
 854:	bf 92       	push	r11
 856:	cf 92       	push	r12
 858:	df 92       	push	r13
 85a:	ef 92       	push	r14
 85c:	ff 92       	push	r15
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	cd b7       	in	r28, 0x3d	; 61
 868:	de b7       	in	r29, 0x3e	; 62
 86a:	ca 1b       	sub	r28, r26
 86c:	db 0b       	sbc	r29, r27
 86e:	0f b6       	in	r0, 0x3f	; 63
 870:	f8 94       	cli
 872:	de bf       	out	0x3e, r29	; 62
 874:	0f be       	out	0x3f, r0	; 63
 876:	cd bf       	out	0x3d, r28	; 61
 878:	09 94       	ijmp

0000087a <__epilogue_restores__>:
 87a:	2a 88       	ldd	r2, Y+18	; 0x12
 87c:	39 88       	ldd	r3, Y+17	; 0x11
 87e:	48 88       	ldd	r4, Y+16	; 0x10
 880:	5f 84       	ldd	r5, Y+15	; 0x0f
 882:	6e 84       	ldd	r6, Y+14	; 0x0e
 884:	7d 84       	ldd	r7, Y+13	; 0x0d
 886:	8c 84       	ldd	r8, Y+12	; 0x0c
 888:	9b 84       	ldd	r9, Y+11	; 0x0b
 88a:	aa 84       	ldd	r10, Y+10	; 0x0a
 88c:	b9 84       	ldd	r11, Y+9	; 0x09
 88e:	c8 84       	ldd	r12, Y+8	; 0x08
 890:	df 80       	ldd	r13, Y+7	; 0x07
 892:	ee 80       	ldd	r14, Y+6	; 0x06
 894:	fd 80       	ldd	r15, Y+5	; 0x05
 896:	0c 81       	ldd	r16, Y+4	; 0x04
 898:	1b 81       	ldd	r17, Y+3	; 0x03
 89a:	aa 81       	ldd	r26, Y+2	; 0x02
 89c:	b9 81       	ldd	r27, Y+1	; 0x01
 89e:	ce 0f       	add	r28, r30
 8a0:	d1 1d       	adc	r29, r1
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	f8 94       	cli
 8a6:	de bf       	out	0x3e, r29	; 62
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	cd bf       	out	0x3d, r28	; 61
 8ac:	ed 01       	movw	r28, r26
 8ae:	08 95       	ret

000008b0 <_exit>:
 8b0:	f8 94       	cli

000008b2 <__stop_program>:
 8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <__stop_program>
